[{"slug":"carisurau-architecture-part-1","category":"blog","title":"Carisurau Architecture - Part 1","description":"Bagaimana saya deploy dan host carisurau dengan minimal cost setiap bulan?","tags":["architecture"],"body":"\nBagaimana saya deploy dan host carisurau dengan minimal cost setiap bulan?\n\n---\n\n## Pengenalan\n\nSedikit pengenalan tentang projek carisurau.com. Projek ini adalah projek non-profit, sumber terbuka dan inisiatif dari saya sendiri untuk belajar tentang NextJS dan sampaikan ilmu kepada orang lain.\n\n### Keputusan architecture dibuat\n\nKebiasaannya sebelum saya buat sesebuah projek saya akan overthink kehadapan dan pengakhirannya projek itu sama ada separuh jalan atau tidak dibuat langsung (share article ini kalau anda pernah mengalami benda yang sama). Akan tetapi, untuk carisurau ini keadaannya berbeza. Ini karena saya dengan yakin terus memilih NextJS sebagai framework untuk membina carisurau.\n\n```js\nif (prayerTime) {\n  cariSurau()\n}\n```\n\nJadi mengapa NextJS? Ia adalah kerana pada beberapa bulan sebelum itu saya ada buat satu projek menggunakan [T3stack](https://create.t3.gg/) dan amat berpuas hati terhadap performance dan developer experience scaffolding tool tersebut. Setelah melangkah ke dunia Typescript ketika bekerja di ServiceRocket, Type-safety adalah pilihan utama saya di application / code level. Nanti saya cerita kenapa type-safety penting dan cara untuk implement check di CI/CD pipeline.\n\n### Kenapa tak pakai Vercel?\n\nSaya mendapat soalan ni dengan agak banyak jadi disini saya ingin terangkan kenapa saya tak pakai Vercel. Pertama sekali disebabkan influnce dari manusia sekeliling. Pada satu hari sambil scroll twitter saya ada nampak seorang developer dari malaysia bernama Afrie [tweet](https://twitter.com/afrieirham_/status/1669616820024918022) tentang bandwith dan web analytics usage dari Vercel yang telah mencapai tahap free tier limit.\n\nPerkara ini agak merisaukan saya, walaupun saya tahu carisurau tidak sepopular website beliau. Akan tetapi ia tetap menimbulkan kerisauan. Jadi untuk merancang kehadapan saya cari option lain selain dari Vercel untuk deploy carisurau.com.\n\n### Containarize carisurau.com\n\nBenda pertama yang saya buat adalah containarize carisurau.com. Kerana saya lihat pada zaman sekarang, ramai developer telah menggunakan Kubernetes, Docker Swarm mahupun sekadar Docker untuk melancarkan website mereka. Bagi saya, perkara ini masih tidak popular di Malaysia kerana masih ramai menggunakan Laravel dimana agak susah untuk custom containarizekan aplikasi yang menggunakan framework Laravel. Nak kena fikir tentang Nginx, PHP-fpm, PHP_SESSION dan bermacam lagi.\n\nSetakat ini saya tak pernah jumpa lagi cara sebenar / best practice untuk deploy Containarized Laravel application ke production environment. Berbalik kepada containarize carisurau, saya plan untuk menjadikan carisurau modular dan boleh di deploy dimana mana sahaja, sebab itu keputusan untuk pack carisurau dibuat.\n\n---\n\n## Akan bersambung..."},{"slug":"introducing-astro-2","category":"blog","title":"Astro 2.0 - 100% Type-safe MD and MDX Experience","description":"There's a simple secret to building a faster website — just ship less.","tags":["astro","jam-stack","srr"],"body":"\nUnfortunately, modern web development has been trending in the opposite direction—towards more. More JavaScript, more features, more moving parts, and ultimately more complexity needed to keep it all running smoothly.\n\nToday I'm excited to publicly share Astro: a new kind of static site builder that delivers lightning-fast performance with a modern developer experience. To design Astro, we borrowed the best parts of our favorite tools and then added a few innovations of our own, including:\n\n- Bring Your Own Framework (BYOF): Build your site using React, Svelte, Vue, Preact, web components, or just plain ol' HTML + JavaScript.\n- 100% Static HTML, No JS: Astro renders your entire page to static HTML, removing all JavaScript from your final build by default.\n- On-Demand Components: Need some JS? Astro can automatically hydrate interactive components when they become visible on the page. If the user never sees it, they never load it.\n- Fully-Featured: Astro supports TypeScript, Scoped CSS, CSS Modules, Sass, Tailwind, Markdown, MDX, and any of your favorite npm packages.\n- SEO Enabled: Automatic sitemaps, RSS feeds, pagination and collections take the pain out of SEO and syndication.\n\n## H1 is good\n\n### H2 is good too\n\n> links are better\n\n[I know](they-are-better)\n\nThis post marks the first public beta release of Astro. Missing features and bugs are still to be expected at this early stage. There are still some months to go before an official 1.0 release, but there are already several fast sites built with Astro in production today. We would love your early feedback as we move towards a v1.0 release later this year.\n\n> To learn more about Astro and start building your first site, check out the project README.\n\n# Example - Syntax Highlighting\n\n## Shell(Bash)\n\n```bash\n# make a new project directory and jump into it\nmkdir my-astro-project && cd $_\n\n# create a new project with npm\nnpm create astro@latest\n\n# or yarn\nyarn create astro\n\n# or pnpm\npnpm create astro@latest\n```\n\n## Python\n\n```python\nprint('hello world')\n```\n\n## Javascript\n\n```js\nconst func = () => {alert(\"hello\")}\n```\n"},{"slug":"introducing-astro-ship-less-javascript","category":"blog","title":"Introducing Astro - Ship Less JavaScript","description":"There's a simple secret to building a faster website — just ship less.","tags":["astro","jam-stack"],"body":"\nUnfortunately, modern web development has been trending in the opposite direction—towards more. More JavaScript, more features, more moving parts, and ultimately more complexity needed to keep it all running smoothly.\n\nToday I'm excited to publicly share Astro: a new kind of static site builder that delivers lightning-fast performance with a modern developer experience. To design Astro, we borrowed the best parts of our favorite tools and then added a few innovations of our own, including:\n\n- Bring Your Own Framework (BYOF): Build your site using React, Svelte, Vue, Preact, web components, or just plain ol' HTML + JavaScript.\n- 100% Static HTML, No JS: Astro renders your entire page to static HTML, removing all JavaScript from your final build by default.\n- On-Demand Components: Need some JS? Astro can automatically hydrate interactive components when they become visible on the page. If the user never sees it, they never load it.\n- Fully-Featured: Astro supports TypeScript, Scoped CSS, CSS Modules, Sass, Tailwind, Markdown, MDX, and any of your favorite npm packages.\n- SEO Enabled: Automatic sitemaps, RSS feeds, pagination and collections take the pain out of SEO and syndication.\n\n## H1 is good\n\n### H2 is good too\n\n> links are better\n\n[I know](they-are-better)\n\nThis post marks the first public beta release of Astro. Missing features and bugs are still to be expected at this early stage. There are still some months to go before an official 1.0 release, but there are already several fast sites built with Astro in production today. We would love your early feedback as we move towards a v1.0 release later this year.\n\n> To learn more about Astro and start building your first site, check out the project README.\n\n# Example - Syntax Highlighting\n\n## Shell(Bash)\n\n```bash\n# make a new project directory and jump into it\nmkdir my-astro-project && cd $_\n\n# create a new project with npm\nnpm create astro@latest\n\n# or yarn\nyarn create astro\n\n# or pnpm\npnpm create astro@latest\n```\n\n## Python\n\n```python\nprint('hello world')\n```\n\n## Javascript\n\n```js\nconst func = () => {alert(\"hello\")}\n```\n"},{"slug":"introducing-astro","category":"blog","title":"Introducing Astro - Ship Less JavaScript","description":"There's a simple secret to building a faster website — just ship less.","tags":["astro","jam-stack"],"body":"\nUnfortunately, modern web development has been trending in the opposite direction—towards more. More JavaScript, more features, more moving parts, and ultimately more complexity needed to keep it all running smoothly.\n\nToday I'm excited to publicly share Astro: a new kind of static site builder that delivers lightning-fast performance with a modern developer experience. To design Astro, we borrowed the best parts of our favorite tools and then added a few innovations of our own, including:\n\n- Bring Your Own Framework (BYOF): Build your site using React, Svelte, Vue, Preact, web components, or just plain ol' HTML + JavaScript.\n- 100% Static HTML, No JS: Astro renders your entire page to static HTML, removing all JavaScript from your final build by default.\n- On-Demand Components: Need some JS? Astro can automatically hydrate interactive components when they become visible on the page. If the user never sees it, they never load it.\n- Fully-Featured: Astro supports TypeScript, Scoped CSS, CSS Modules, Sass, Tailwind, Markdown, MDX, and any of your favorite npm packages.\n- SEO Enabled: Automatic sitemaps, RSS feeds, pagination and collections take the pain out of SEO and syndication.\n\n## H1 is good\n\n### H2 is good too\n\n> links are better\n\n[I know](they-are-better)\n\nThis post marks the first public beta release of Astro. Missing features and bugs are still to be expected at this early stage. There are still some months to go before an official 1.0 release, but there are already several fast sites built with Astro in production today. We would love your early feedback as we move towards a v1.0 release later this year.\n\n> To learn more about Astro and start building your first site, check out the project README.\n"},{"slug":"islands-architecture","category":"blog","title":"Islands Architecture","description":"Render HTML pages on the server, and inject placeholders or slots around highly dynamic regions.","tags":["astro","jam-stack","architecture","front-end"],"body":"https://jasonformat.com/islands-architecture/\n"},{"slug":"spa-fatigue","category":"blog","title":"Second-guessing the modern web","description":"There is a sweet spot of React - in moderately interactive interfaces..","tags":["architecture","front-end","spa"],"body":"https://macwright.com/2020/05/10/spa-fatigue.html\n"}]